using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _01._Basic_Stack_Operations
{

    internal class Program

    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            char[,] matrix = new char[n, n];
            for (int i = 0; i < n; i++)
            {
                string input = Console.ReadLine();
                for (int j = 0; j < n; j++)
                {
                    matrix[i, j] = input[j];
                }
            }

            int removeCounter = 0;
            while (true)
            {
                int maxKills = 0;
                int safeRow = 0;
                int safeCol = 0;
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < n; j++)
                    {
                        int currentKills = 0;
                        if (matrix[i, j] == 'K')
                        {
                            if (IsInside(matrix, i - 2, j + 1) && matrix[i - 2, j + 1] == 'K')
                            {
                                currentKills++;
                            }
                            if (IsInside(matrix, i - 2, j - 1) && matrix[i - 2, j - 1] == 'K')
                            {
                                currentKills++;
                            }
                            if (IsInside(matrix, i + 2, j + 1) && matrix[i + 2, j + 1] == 'K')
                            {
                                currentKills++;
                            }
                            if (IsInside(matrix, i + 2, j - 1) && matrix[i + 2, j - 1] == 'K')
                            {
                                currentKills++;
                            }
                            if (IsInside(matrix, i - 1, j + 2) && matrix[i - 1, j + 2] == 'K')
                            {
                                currentKills++;
                            }
                            if (IsInside(matrix, i - 1, j - 2) && matrix[i - 1, j - 2] == 'K')
                            {
                                currentKills++;
                            }
                            if (IsInside(matrix, i + 1, j + 2) && matrix[i + 1, j + 2] == 'K')
                            {
                                currentKills++;
                            }
                            if (IsInside(matrix, i + 1, j - 2) && matrix[i + 1, j - 2] == 'K')
                            {
                                currentKills++;
                            }
                            if (currentKills > maxKills)
                            {
                                maxKills = currentKills;
                                safeRow = i;
                                safeCol = j;
                            }
                        }
                    }
                }
                if (maxKills != 0)
                {
                    matrix[safeRow, safeCol] = '0';
                    removeCounter++;
                    safeCol = 0;
                    safeRow = 0;
                }
                else
                {
                        Console.WriteLine(removeCounter);
                        break;
                }
            }
        }

        private static bool IsInside(char[,] matrix, int row, int col)
        {
            return row >= 0 && row < matrix.GetLength(0) && col >= 0 && col < matrix.GetLength(1);
        }
    }
}
