using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _01._Basic_Stack_Operations
{

    internal class Program

    {
        static void Main(string[] args)
        {
            int bulletPrice = int.Parse(Console.ReadLine());
            int gunBarrelSize = int.Parse(Console.ReadLine());
            int[] bulletsSizes = Console.ReadLine()
                .Split(" ")
                .Select(int.Parse)
                .ToArray();
            int[] lokcsSizes = Console.ReadLine()
                .Split(" ")
                .Select(int.Parse)
                .ToArray();
            int intelligenceValue = int.Parse(Console.ReadLine());
            int bulletsCounter = 0;
            int gunBarrelCounter = 0;
            int startBulletCount = bulletsSizes.Count();
            
            Stack<int> bullets = new Stack<int>(bulletsSizes);
            Queue<int> locks = new Queue<int>(lokcsSizes);

            while (locks.Count > 0)
            {
                if (bullets.Count!=0)
                {
                    if (gunBarrelSize != bulletsCounter)
                    {
                        if (locks.Peek() >= bullets.Peek())
                        {
                            Console.WriteLine("Bang!");
                            locks.Dequeue();
                            bullets.Pop();
                        }
                        else
                        {
                            Console.WriteLine("Ping!");
                            bullets.Pop();
                        }
                        bulletsCounter++;
                    }
                    if (gunBarrelSize == bulletsCounter&&bullets.Count!=0)
                    {
                        Console.WriteLine("Reloading!");
                        gunBarrelCounter++;
                        bulletsCounter = 0;
                    }
                }
                else
                {
                    Console.WriteLine($"Couldn't get through. Locks left: {locks.Count}");
                    return;
                }
            }
            int bulletLefts = startBulletCount - ((gunBarrelCounter * gunBarrelSize) + bulletsCounter);
            int profit = intelligenceValue - ((startBulletCount - bulletLefts) * bulletPrice);
            Console.WriteLine($"{bulletLefts} bullets left. Earned ${profit}");

        }
    }
}
